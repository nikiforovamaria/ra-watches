{"version":3,"sources":["components/ClockItem.js","components/FormAddClock.js","components/WorldClock.js","App.js","reportWebVitals.js","index.js"],"names":["ClockItem","props","state","hour","minute","second","timeInterval","setClock","bind","handleClose","this","degreeSecond","degreeMinute","rotateArrow","Fragment","className","clocksSetup","name","width","height","transform","id","strokeWidth","y2","strokeLinecap","stroke","opacity","y1","onClick","onClose","date","Date","h","parseInt","getUTCHours","timeZone","m","getUTCMinutes","s","getUTCSeconds","setState","setInterval","clearInterval","Component","FormAddClock","useState","form","setForm","handleChange","evt","target","value","prevForm","onChange","type","preventDefault","setClocks","shortid","generate","onFormSubmit","WorldClocks","clocks","prevClocks","filter","item","addClocks","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,EACNC,OAAQ,EACRC,OAAQ,GAEV,EAAKC,aAAe,KACpB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBATF,E,0CAYnB,WACE,IACEL,EACEO,KAAKR,MADPC,KAEF,EAGIO,KAAKR,MAFPE,EADF,EACEA,OACAC,EAFF,EAEEA,OAIIM,EAAe,EAAIN,EACnBO,EAAwC,GAAxBR,EAASC,EAAS,IAGlCQ,EAAc,CAClBV,KAAK,UAAD,OAHoD,KAH1DA,EAAOA,EAAO,GAAKA,EAAO,GAAKA,GAGJC,EAAS,GAAKC,EAAS,MAG5C,KACJD,OAAO,UAAD,OAAYQ,EAAZ,KACNP,OAAO,UAAD,OAAYM,EAAZ,MAGR,OACE,cAAC,IAAMG,SAAP,UACE,sBAAKC,UAAU,aAAf,UACE,4BAAIL,KAAKT,MAAMe,YAAYC,OAC3B,qBAAKC,MAAM,QAAQC,OAAO,QAA1B,SACE,oBAAGC,UAAU,mBAAb,UACE,mBAAGC,GAAG,OAAOD,UAAWP,EAAYV,KAApC,SACE,sBAAMmB,YAAY,IAAIC,GAAG,MAAMC,cAAc,QAAQC,OAAO,QAAQC,QAAQ,SAE9E,mBAAGL,GAAG,SAASD,UAAWP,EAAYT,OAAtC,SACE,sBAAMkB,YAAY,IAAIC,GAAG,MAAMC,cAAc,QAAQC,OAAO,QAAQC,QAAQ,SAE9E,mBAAGL,GAAG,SAASD,UAAWP,EAAYR,OAAtC,SACE,sBAAMiB,YAAY,IAAIK,GAAG,KAAKJ,GAAG,MAAMC,cAAc,QAAQC,OAAO,iBAI1E,oBAAGV,UAAU,QAAb,UACGL,KAAKR,MAAMC,KAAO,GAAlB,WAA2BO,KAAKR,MAAMC,MAASO,KAAKR,MAAMC,KAD7D,IAEGO,KAAKR,MAAME,OAAS,GAApB,WAA6BM,KAAKR,MAAME,QAAWM,KAAKR,MAAME,OAFjE,IAGGM,KAAKR,MAAMG,OAAS,GAApB,WAA6BK,KAAKR,MAAMG,QAAWK,KAAKR,MAAMG,UACjE,qBAAKU,UAAU,QAAQa,QAASlB,KAAKD,YAArC,sB,yBAMR,WACEC,KAAKT,MAAM4B,QAAQnB,KAAKT,MAAMe,YAAYK,M,sBAG5C,WACE,IAAMS,EAAO,IAAIC,KACXC,EAAIC,SAASH,EAAKI,cAAe,IAAMD,SAASvB,KAAKT,MAAMe,YAAYmB,SAAU,IAEjFC,EAAIH,SAASH,EAAKO,gBAAiB,IACnCC,EAAIL,SAASH,EAAKS,gBAAiB,IAEzC7B,KAAK8B,SAAS,CACZrC,KAAM6B,EACN5B,OAAQgC,EACR/B,OAAQiC,M,+BAIZ,WACE5B,KAAKH,WACLG,KAAKJ,aAAemC,YAAY/B,KAAKH,SAAU,O,kCAGjD,WACEG,KAAKJ,aAAeoC,cAAchC,KAAKJ,kB,GApFJqC,a,+BCCxB,SAASC,EAAa3C,GACnC,MAAwB4C,mBAAS,CAC/B5B,KAAM,GACNkB,SAAU,KAFZ,mBAAOW,EAAP,KAAaC,EAAb,KAKMC,EAAe,SAACC,GACpB,MAAwBA,EAAIC,OAApBjC,EAAR,EAAQA,KAAMkC,EAAd,EAAcA,MACdJ,GAAQ,SAACK,GAAD,mBAAC,eAAmBA,GAApB,kBAA+BnC,EAAOkC,QAoBhD,OACE,iCACE,qFACE,uBAAOlC,KAAK,OAAOoC,SAAUL,EAAcG,MAAOL,EAAK7B,UAEzD,oHACE,uBAAOA,KAAK,WAAWqC,KAAK,SAASD,SAAUL,EAAcG,MAAOL,EAAKX,cAE3E,uBAAOmB,KAAK,SAAS1B,QAzBJ,SAACqB,GAEpB,GADAA,EAAIM,iBACc,KAAdT,EAAK7B,MAAiC,KAAlB6B,EAAKX,SAAiB,CAC5C,IAAMqB,EAAY,CAChBnC,GAAIoC,IAAQC,WACZzC,KAAM6B,EAAK7B,KACXkB,SAAUW,EAAKX,UAGjBlC,EAAM0D,aAAaH,GACnBT,EAAQ,CACN9B,KAAM,GACNkB,SAAU,OAagCgB,MAAM,wDCpCzC,SAASS,IACtB,MAA4Bf,mBAAS,IAArC,mBAAOgB,EAAP,KAAeL,EAAf,KAMM/C,EAAc,SAACY,GACnBmC,GAAU,SAACM,GAAD,OAAiBA,EAAWC,QAAO,SAACC,GAAD,OAAUA,EAAK3C,KAAOA,SAGrE,OACE,eAAC,IAAMP,SAAP,WACE,cAAC8B,EAAD,CAAce,aAVE,SAACM,GACnBT,GAAU,SAACM,GAAD,4BAAqBA,GAArB,CAAiCG,UAUzC,qBAAKlD,UAAU,aAAf,SACG8C,EAAOK,KAAI,SAACF,GAAD,OACV,cAAC,EAAD,CAAyBhD,YAAagD,EAAMnC,QAASpB,GAArCuD,EAAK3C,YCPhB8C,MARf,WACE,OACE,qBAAKpD,UAAU,YAAf,SACE,cAAC6C,EAAD,OCISQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2090165.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ClockItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hour: 0,\r\n      minute: 0,\r\n      second: 0,\r\n    };\r\n    this.timeInterval = null;\r\n    this.setClock = this.setClock.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      hour,\r\n    } = this.state;\r\n    const {\r\n      minute,\r\n      second,\r\n    } = this.state;\r\n\r\n    hour = hour > 12 ? hour - 12 : hour;\r\n    const degreeSecond = 6 * second;\r\n    const degreeMinute = (minute + second / 60) * 6;\r\n    const degreeHour = (hour + minute / 60 + second / 3600) * 30;\r\n\r\n    const rotateArrow = {\r\n      hour: `rotate(${degreeHour})`,\r\n      minute: `rotate(${degreeMinute})`,\r\n      second: `rotate(${degreeSecond})`,\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className='item-clock'>\r\n          <p>{this.props.clocksSetup.name}</p>\r\n          <svg width=\"150px\" height=\"150px\">\r\n            <g transform=\"translate(75,75)\">\r\n              <g id=\"hour\" transform={rotateArrow.hour}>\r\n                <line strokeWidth=\"6\" y2=\"-45\" strokeLinecap=\"round\" stroke=\"black\" opacity=\".5\" />\r\n              </g>\r\n              <g id=\"minute\" transform={rotateArrow.minute}>\r\n                <line strokeWidth=\"4\" y2=\"-70\" strokeLinecap=\"round\" stroke=\"black\" opacity=\".9\" />\r\n              </g>\r\n              <g id=\"second\" transform={rotateArrow.second}>\r\n                <line strokeWidth=\"2\" y1=\"10\" y2=\"-75\" strokeLinecap=\"round\" stroke=\"black\" />\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <p className='timer'>\r\n            {this.state.hour < 10 ? `0${this.state.hour}` : this.state.hour}:\r\n            {this.state.minute < 10 ? `0${this.state.minute}` : this.state.minute}:\r\n            {this.state.second < 10 ? `0${this.state.second}` : this.state.second}</p>\r\n          <div className=\"close\" onClick={this.handleClose}>X</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  handleClose() {\r\n    this.props.onClose(this.props.clocksSetup.id);\r\n  }\r\n\r\n  setClock() {\r\n    const date = new Date();\r\n    const h = parseInt(date.getUTCHours(), 10) + parseInt(this.props.clocksSetup.timeZone, 10);\r\n    // h = h > 12 ? h-12: h;\r\n    const m = parseInt(date.getUTCMinutes(), 10);\r\n    const s = parseInt(date.getUTCSeconds(), 10);\r\n\r\n    this.setState({\r\n      hour: h,\r\n      minute: m,\r\n      second: s,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setClock();\r\n    this.timeInterval = setInterval(this.setClock, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.timeInterval = clearInterval(this.timeInterval);\r\n  }\r\n}\r\n\r\nClockItem.propTypes = {\r\n  clocksSetup: PropTypes.object.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FormAddClock(props) {\r\n  const [form, setForm] = useState({\r\n    name: '',\r\n    timeZone: '',\r\n  });\r\n\r\n  const handleChange = (evt) => {\r\n    const { name, value } = evt.target;\r\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    if (form.name !== '' && form.timeZone !== '') {\r\n      const setClocks = {\r\n        id: shortid.generate(),\r\n        name: form.name,\r\n        timeZone: form.timeZone,\r\n      };\r\n\r\n      props.onFormSubmit(setClocks);\r\n      setForm({\r\n        name: '',\r\n        timeZone: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>Название\r\n        <input name='name' onChange={handleChange} value={form.name} />\r\n      </label>\r\n      <label>Временная зона\r\n        <input name='timeZone' type='number' onChange={handleChange} value={form.timeZone} />\r\n      </label>\r\n      <input type='button' onClick={handleSubmit} value='Добавить' />\r\n    </form>\r\n  );\r\n}\r\n\r\nFormAddClock.propTypes = {\r\n  onFormSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport ClockItem from './ClockItem.js';\r\nimport FormAddClock from './FormAddClock.js';\r\n\r\nexport default function WorldClocks() {\r\n  const [clocks, setClocks] = useState([]);\r\n\r\n  const handleSbmit = (addClocks) => {\r\n    setClocks((prevClocks) => ([...prevClocks, addClocks]));\r\n  };\r\n\r\n  const handleClose = (id) => {\r\n    setClocks((prevClocks) => (prevClocks.filter((item) => item.id !== id)));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FormAddClock onFormSubmit={handleSbmit} />\r\n      <div className='clock-list'>\r\n        {clocks.map((item) => (\r\n          <ClockItem key={item.id} clocksSetup={item} onClose={handleClose} />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n// import './bootstrap.min.css';\nimport WorldClocks from './components/WorldClock.js';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <WorldClocks />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}